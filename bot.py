import os
import datetime
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# --- Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

# --- Telegram —Ç–æ–∫–µ–Ω (–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render)
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render.")
bot = Bot(token=TOKEN)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ —Ä–æ–∑–º–æ–≤–∏
NAME, PHONE, DATE, TIME = range(4)

# --- Google Calendar API
SCOPES = ["https://www.googleapis.com/auth/calendar.events"]
CALENDAR_ID = "primary"


def get_calendar_service():
    creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    return build("calendar", "v3", credentials=creds)


def is_time_slot_available(service, date, time):
    start = datetime.datetime.combine(date, time)
    end = start + datetime.timedelta(minutes=90)
    events = (
        service.events()
        .list(
            calendarId=CALENDAR_ID,
            timeMin=start.isoformat() + "Z",
            timeMax=end.isoformat() + "Z",
            singleEvents=True,
            orderBy="startTime",
        )
        .execute()
    )
    return not events.get("items", [])


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?"
    )
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìû –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("üìÖ –ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (–†–†–†–†-–ú–ú-–î–î)")
    return DATE


async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["date"] = datetime.datetime.strptime(
            update.message.text, "%Y-%m-%d"
        ).date()
        await update.message.reply_text("‚è∞ –í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):")
        return TIME
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return DATE


async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
        date = context.user_data["date"]
        name = context.user_data["name"]
        phone = context.user_data["phone"]

        service = get_calendar_service()
        if not is_time_slot_available(service, date, time):
            await update.message.reply_text("‚è∞ –ù–∞ —Ü–µ–π —á–∞—Å —É–∂–µ —î –∑–∞–ø–∏—Å. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å.")
            return TIME

        start_time = datetime.datetime.combine(date, time)
        end_time = start_time + datetime.timedelta(minutes=90)

        event = {
            "summary": f"–ó–∞–ø–∏—Å: {name}",
            "description": f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
            "start": {"dateTime": start_time.isoformat(), "timeZone": "Europe/Kiev"},
            "end": {"dateTime": end_time.isoformat(), "timeZone": "Europe/Kiev"},
        }
        service.events().insert(calendarId=CALENDAR_ID, body=event).execute()

        await update.message.reply_text(
            f"‚ú® {name}, –¥—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–∏—Å!\n\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üïí –ß–∞—Å: {time.strftime('%H:%M')} ‚Äì {end_time.strftime('%H:%M')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üíÖ –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –≤ —Å–∞–ª–æ–Ω—ñ –∫—Ä–∞—Å–∏ S3!"
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30.")
        return TIME


# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Telegram
application = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
    },
    fallbacks=[],
)

application.add_handler(conv_handler)


# --- Webhook –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)
    await application.process_update(update)
    return "ok", 200


# --- Root –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Render
@app.route("/")
def index():
    return "Bot is running!", 200


# --- –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
