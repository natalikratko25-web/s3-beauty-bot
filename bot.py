import os
import datetime
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å—Ç–∞–Ω—ñ–≤ ---
NAME, DATE, TIME, PHONE = range(4)

# --- Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ ---
app = Flask(__name__)

# --- –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ Render Secrets ---
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render!")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Calendar ---
def get_calendar_service():
    if not os.path.exists("token.json"):
        raise FileNotFoundError("‚ùå –§–∞–π–ª token.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–≤–∞–Ω—Ç–∞–∂ –π–æ–≥–æ —É Render —è–∫ Secret File.")
    creds = Credentials.from_authorized_user_file("token.json", ["https://www.googleapis.com/auth/calendar.events"])
    service = build("calendar", "v3", credentials=creds)
    return service

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É ---
def is_time_slot_available(service, date, time):
    start_time = datetime.datetime.combine(date, time)
    end_time = start_time + datetime.timedelta(minutes=90)
    events_result = (
        service.events()
        .list(
            calendarId="primary",
            timeMin=start_time.isoformat() + "Z",
            timeMax=end_time.isoformat() + "Z",
            singleEvents=True,
            orderBy="startTime",
        )
        .execute()
    )
    return not events_result.get("items", [])

# --- –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

# --- –Ü–º‚Äô—è ---
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–î—É–∂–µ –ø—Ä–∏—î–º–Ω–æ! ü•∞ –ù–∞ —è–∫—É –¥–∞—Ç—É —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î)")
    return DATE

# --- –î–∞—Ç–∞ ---
async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
        context.user_data["date"] = date
        await update.message.reply_text("‚è∞ –í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å (—É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•)")
        return TIME
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –†–†–†–†-–ú–ú-–î–î")
        return DATE

# --- –ß–∞—Å ---
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
        context.user_data["time"] = time
        service = get_calendar_service()
        date = context.user_data["date"]

        if not is_time_slot_available(service, date, time):
            await update.message.reply_text("‚ùå –ù–∞ —Ü–µ–π —á–∞—Å —É–∂–µ —î –∑–∞–ø–∏—Å. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å.")
            return TIME

        await update.message.reply_text("üìû –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:")
        return PHONE

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ì–ì:–•–•")
        return TIME

# --- –¢–µ–ª–µ—Ñ–æ–Ω ---
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data["phone"] = phone
    service = get_calendar_service()

    name = context.user_data["name"]
    date = context.user_data["date"]
    time = context.user_data["time"]
    start_time = datetime.datetime.combine(date, time)
    end_time = start_time + datetime.timedelta(minutes=90)

    event = {
        "summary": f"–ó–∞–ø–∏—Å: {name}",
        "description": f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        "start": {"dateTime": start_time.isoformat(), "timeZone": "Europe/Kiev"},
        "end": {"dateTime": end_time.isoformat(), "timeZone": "Europe/Kiev"},
    }

    service.events().insert(calendarId="primary", body=event).execute()

    # --- "–í—ñ–∑–∏—Ç–∫–∞" –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ---
    confirm_message = (
        "üíÖ *–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!*\n\n"
        f"üë§ *–ö–ª—ñ—î–Ω—Ç:* {name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date.strftime('%d.%m.%Y')}\n"
        f"üïì *–ß–∞—Å:* {time.strftime('%H:%M')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–∏ *S3*! üíñ"
    )

    await update.message.reply_text(confirm_message, parse_mode="Markdown")
    return ConversationHandler.END

# --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start üíÖ")
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ Telegram ---
application = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(conv_handler)

# --- –û–±—Ä–æ–±–∫–∞ webhook ---
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json(force=True)
    print("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", update)
    application.update_queue.put_nowait(Update.de_json(update, application.bot))
    return "OK", 200

@app.route("/", methods=["GET"])
def home():
    return "üíÖ S3 Beauty Bot –ø—Ä–∞—Ü—é—î!", 200

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=PORT)
