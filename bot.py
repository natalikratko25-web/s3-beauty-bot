import os
import datetime
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# === Flask "—Ñ—ñ–∫—Ç–∏–≤–Ω–∏–π" —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/')
def home():
    return "S3 Beauty Salon üíÖ Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# === –°–¢–ê–ù–ò –¥–ª—è —Ä–æ–∑–º–æ–≤–∏ ===
NAME, PHONE, DATE, TIME = range(4)

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è Google Calendar —Å–µ—Ä–≤—ñ—Å—É ===
def get_calendar_service():
    if not os.path.exists("token.json"):
        raise FileNotFoundError("‚ùå –§–∞–π–ª token.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –π–æ–≥–æ –Ω–∞ Render (–≤ Files –∞–±–æ —è–∫ Secret File).")

    creds = Credentials.from_authorized_user_file("token.json", ["https://www.googleapis.com/auth/calendar.events"])
    return build("calendar", "v3", credentials=creds)

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É ===
def is_time_slot_available(service, date, time):
    start_time = datetime.datetime.combine(date, time)
    end_time = start_time + datetime.timedelta(minutes=90)

    events_result = service.events().list(
        calendarId='primary',
        timeMin=start_time.isoformat() + "Z",
        timeMax=end_time.isoformat() + "Z",
        singleEvents=True,
        orderBy="startTime"
    ).execute()

    return not events_result.get("items", [])

# === –ö–æ–º–∞–Ω–¥–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üå∏ –ê —è–∫–∏–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É, –±—É–¥—å –ª–∞—Å–∫–∞ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
        context.user_data["date"] = date
        await update.message.reply_text("–ß—É–¥–æ–≤–æ! üïê –ê –Ω–∞ —è–∫—É –≥–æ–¥–∏–Ω—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å?")
        return TIME
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î.")
        return DATE

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
        date = context.user_data["date"]
        context.user_data["time"] = time

        service = get_calendar_service()

        if not is_time_slot_available(service, date, time):
            await update.message.reply_text("‚è∞ –¶–µ–π —á–∞—Å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –û—Å—å –∫—ñ–ª—å–∫–∞ –≤—ñ–ª—å–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:")

            free_slots = []
            for i in range(1, 6):
                new_time = (datetime.datetime.combine(date, time) + datetime.timedelta(minutes=90 * i)).time()
                if is_time_slot_available(service, date, new_time):
                    free_slots.append(new_time.strftime("%H:%M"))
                if len(free_slots) >= 3:
                    break

            await update.message.reply_text(", ".join(free_slots) if free_slots else "–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ üòî")
            return TIME

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é
        start_time = datetime.datetime.combine(date, time)
        end_time = start_time + datetime.timedelta(minutes=90)

        event = {
            'summary': f'–ó–∞–ø–∏—Å: {context.user_data["name"]}',
            'description': f'–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data["phone"]}',
            'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Europe/Kiev'},
            'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Europe/Kiev'}
        }

        service.events().insert(calendarId='primary', body=event).execute()

        confirmation = (
            f"‚ú® *–í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!*\n\n"
            f"üë© –Ü–º‚Äô—è: {context.user_data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
            f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n"
            f"üïí –ß–∞—Å: {time.strftime('%H:%M')} ‚Äì {(end_time).strftime('%H:%M')}\n\n"
            f"–î—è–∫—É—î–º–æ, —â–æ –æ–±–∏—Ä–∞—î—Ç–µ S3 Beauty Salon üíñ"
        )

        await update.message.reply_text(confirmation, parse_mode="Markdown")
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•.")
        return TIME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üíÖ")
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===
def main():
    TOKEN = os.getenv("BOT_TOKEN")  # ‚úÖ –¢–æ–∫–µ–Ω –∑–∞–¥–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ Render Secret
    if not TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ –≤ Render ‚Üí Environment ‚Üí Secret.")

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è... üíÖ")
    app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    main()
