import logging
import datetime
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# === Google Calendar ===
SCOPES = ["https://www.googleapis.com/auth/calendar.events"]

def get_calendar_service():
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    else:
        # –Ø–∫—â–æ —â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)
        with open("token.json", "w") as token:
            token.write(creds.to_json())
    return build("calendar", "v3", credentials=creds)


def is_time_slot_available(service, date, time):
    start_datetime = datetime.datetime.combine(date, time)
    end_datetime = start_datetime + datetime.timedelta(minutes=90)
    events_result = service.events().list(
        calendarId="primary",
        timeMin=start_datetime.isoformat(),
        timeMax=end_datetime.isoformat(),
        singleEvents=True,
        orderBy="startTime"
    ).execute()

def main():
    TOKEN = "8302341867:AAFtCeDq2eEBWe7C857lfqTQ-IKOxskxZX4"  # <-- –æ—Å—å —Ç—É—Ç –≤—Å—Ç–∞–≤–ª—è—î—à —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ /start —É Telegram.")
    app.run_polling()


if __name__ == "__main__":
    main()

    return not events_result.get("items", [])


# === –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ ===
ASK_NAME, ASK_DATE, ASK_TIME, ASK_PHONE = range(4)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíÖ –í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ *S3 Beauty Salon*!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?", parse_mode="Markdown")
    return ASK_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üóì –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞—Ç—É –∑–∞–ø–∏—Å—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†):")
    return ASK_DATE


async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.datetime.strptime(update.message.text, "%d.%m.%Y").date()
        context.user_data["date"] = date
        await update.message.reply_text("‚è∞ –ß—É–¥–æ–≤–æ! –ê –Ω–∞ –∫–æ—Ç—Ä—É –≥–æ–¥–∏–Ω—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å?")
        return ASK_TIME
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–î–î.–ú–ú.–†–†–†–†):")
        return ASK_DATE


async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
        context.user_data["time"] = time
        await update.message.reply_text("üìû –Ü —â–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –±—É–¥—å –ª–∞—Å–∫–∞:")
        return ASK_PHONE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–ì–ì:–•–•):")
        return ASK_TIME


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data["phone"] = phone
    name, date, time = context.user_data["name"], context.user_data["date"], context.user_data["time"]

    await update.message.rep
    


