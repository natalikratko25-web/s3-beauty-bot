import os
import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# --- Google Calendar setup ---
SCOPES = ['https://www.googleapis.com/auth/calendar.events']

def get_calendar_service():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    else:
        flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return build('calendar', 'v3', credentials=creds)

# --- Conversation states ---
NAME, DATE, TIME, PHONE = range(4)

# --- Start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

# --- Get name ---
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üíñ! –ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è? (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î)")
    return DATE

# --- Get date ---
async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    await update.message.reply_text("‚è∞ –ù–∞ –∫–æ—Ç—Ä—É –≥–æ–¥–∏–Ω—É –±–∞–∂–∞—î—Ç–µ? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 14:30)")
    return TIME

# --- Check available time ---
def is_time_slot_available(service, date, time):
    start_time = datetime.datetime.combine(date, time)
    end_time = start_time + datetime.timedelta(minutes=90)
    events_result = service.events().list(
        calendarId='primary',
        timeMin=start_time.isoformat(),
        timeMax=end_time.isoformat(),
        singleEvents=True,
        orderBy='startTime'
    ).execute()
    return len(events_result.get('items', [])) == 0

# --- Get time ---
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.datetime.strptime(context.user_data['date'], "%Y-%m-%d").date()
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 15:00")
        return TIME

    service = get_calendar_service()

    if not is_time_slot_available(service, date, time):
        await update.message.reply_text("‚ùå –¶–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π —á–∞—Å.")
        return TIME

    context.user_data['time'] = update.message.text
    await update.message.reply_text("üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É.")
    return PHONE

# --- Get phone and confirm ---
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data['phone'] = phone

    name = context.user_data['name']
    date = context.user_data['date']
    time = context.user_data['time']

    # --- Add event to Google Calendar ---
    service = get_calendar_service()
    start_time = datetime.datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
    end_time = start_time + datetime.timedelta(minutes=90)

    event = {
        'summary': f'–ó–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ {name}',
        'description': f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}',
        'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Europe/Kiev'},
        'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Europe/Kiev'},
    }

    service.events().insert(calendarId='primary', body=event).execute()

    await update.message.reply_text(
        f"üíÖ –ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüßæ –Ü–º'—è: {name}\nüìÖ –î–∞—Ç–∞: {date}\n‚è∞ –ß–∞—Å: {time}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ —É —Å–∞–ª–æ–Ω—ñ S3 ‚ù§Ô∏è"
    )

    return ConversationHandler.END

# --- Cancel handler ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# --- Main ---
def main():
    TOKEN = os.getenv("BOT_TOKEN")  # <-- –ë–µ—Ä–µ—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render
    if not TOKEN:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ —É Render ‚Üí Environment ‚Üí BOT_TOKEN")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Render! –ù–∞—Ç–∏—Å–Ω–∏ /start —É Telegram.")
    app.run_polling()


if __name__ == "__main__":
    main()
