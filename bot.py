import os
import logging
import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# -----------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# -----------------------
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ / —Å—Ç–∞–Ω–∏
# -----------------------
SCOPES = ['https://www.googleapis.com/auth/calendar.events']
STATE_NAME, STATE_DATE, STATE_TIME, STATE_PHONE = range(4)
TIMEZONE = 'Europe/Kiev'  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó
SLOT_MINUTES = 90  # 1.5 –≥–æ–¥–∏–Ω–∏

# -----------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -----------------------
def get_calendar_service():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç Google Calendar service.
    –û—á—ñ–∫—É—î, —â–æ token.json —Ç–∞ credentials.json –ø—Ä–∏—Å—É—Ç–Ω—ñ —É —Ä–æ–±–æ—á—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
    –£ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞—Ö –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (—è–∫ Render) –Ω–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ InstalledAppFlow.
    """
    if not os.path.exists('token.json'):
        logger.error("token.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ token.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞–±–æ —è–∫ Secret File.")
        raise FileNotFoundError("token.json not found")

    creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        # –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
            except Exception as e:
                logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω: %s", e)
                raise
        else:
            logger.error("Credentials –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∞–±–æ –Ω–µ–º–∞—î refresh token. –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
            raise RuntimeError("Invalid Google credentials on server")
    service = build('calendar', 'v3', credentials=creds)
    return service

def format_iso_with_tz(dt: datetime.datetime) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î ISO-—Å—Ç—Ä–æ–∫—É –∑ +02:00 (–∑–æ–Ω–∞ Europe/Kiev)."""
    # –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ü–µ naive datetime, –ø–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ +02:00 —É —Ä—è–¥–æ–∫
    return dt.isoformat() + '+02:00'

def is_time_slot_available(service, date_obj: datetime.date, time_obj: datetime.time) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–æ–¥—ñ—ó —É –ø—Ä–æ–º—ñ–∂–∫—É [start, start + SLOT_MINUTES).
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Å–ª–æ—Ç –≤—ñ–ª—å–Ω–∏–π.
    """
    start_dt = datetime.datetime.combine(date_obj, time_obj)
    end_dt = start_dt + datetime.timedelta(minutes=SLOT_MINUTES)
    time_min = format_iso_with_tz(start_dt)
    time_max = format_iso_with_tz(end_dt)

    try:
        events_result = service.events().list(
            calendarId='primary',
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
    except HttpError as e:
        logger.exception("HTTP error –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ events.list: %s", e)
        raise
    except Exception as e:
        logger.exception("–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–ª–æ—Ç—É: %s", e)
        raise

    items = events_result.get('items', [])
    return len(items) == 0

# -----------------------
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–æ—Ç-–¥—ñ–∞–ª–æ–≥—É
# -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é üíÖ –Ø ‚Äî –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3. –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è! –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?"
    )
    return STATE_NAME

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–ß—É–¥–æ–≤–æ! –ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è? (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)")
    return STATE_DATE

async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        date_obj = datetime.datetime.strptime(text, "%Y-%m-%d").date()
        context.user_data['date'] = date_obj
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∞—Å (—Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 14:30)")
        return STATE_TIME
    except ValueError:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ (YYYY-MM-DD).")
        return STATE_DATE

async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        time_obj = datetime.datetime.strptime(text, "%H:%M").time()
        context.user_data['time'] = time_obj
        await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –∑–∞–ª–∏—à—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ +380971234567).")
        return STATE_PHONE
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 15:30).")
        return STATE_TIME

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    context.user_data['phone'] = phone

    name = context.user_data.get('name')
    date_obj = context.user_data.get('date')
    time_obj = context.user_data.get('time')

    # –ö–æ—Ä–æ—Ç–∫–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–≤, —â–æ –π–¥–µ –æ–±—Ä–æ–±–∫–∞
    await update.message.reply_text("üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —á–∞—Å—É —Ç–∞ —Å—Ç–≤–æ—Ä—é—é –∑–∞–ø–∏—Å ‚Äî —Ç—Ä–æ—Ö–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ...")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    try:
        service = get_calendar_service()
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: token.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ token.json —è–∫ Secret File –Ω–∞ Render.")
        return ConversationHandler.END
    except Exception as e:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Calendar service: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Google Calendar. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–ª–æ—Ç—É
    try:
        available = is_time_slot_available(service, date_obj, time_obj)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–ª–æ—Ç—É: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    if not available:
        # –ó–≥–µ–Ω–µ—Ä—É—î–º–æ –∫—ñ–ª—å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        free_slots = []
        start_dt = datetime.datetime.combine(date_obj, time_obj)
        for i in range(1, 8):  # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏
            candidate = (start_dt + datetime.timedelta(minutes=SLOT_MINUTES * i)).time()
            try:
                if is_time_slot_available(service, date_obj, candidate):
                    free_slots.append(candidate.strftime("%H:%M"))
                if len(free_slots) >= 3:
                    break
            except Exception:
                # —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ—Ç—É ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –π–æ–≥–æ —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç—É –¥–ª—è %s", candidate)
                continue

        if free_slots:
            await update.message.reply_text("‚è∞ –ù–∞ –æ–±—Ä–∞–Ω–∏–π —á–∞—Å –≤–∂–µ —î –∑–∞–ø–∏—Å. –û—Å—å –∫—ñ–ª—å–∫–∞ –≤—ñ–ª—å–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: " + ", ".join(free_slots))
        else:
            await update.message.reply_text("‚è∞ –ù–∞ —Ü–µ–π –¥–µ–Ω—å/—á–∞—Å –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–∞–ª–æ–Ω—É.")
        return ConversationHandler.END

    # –Ø–∫—â–æ –≤—ñ–ª—å–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é
    start_dt = datetime.datetime.combine(date_obj, time_obj)
    end_dt = start_dt + datetime.timedelta(minutes=SLOT_MINUTES)

    event_body = {
        'summary': f'–ó–∞–ø–∏—Å S3 ‚Äî {name}',
        'description': f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}',
        'start': {'dateTime': start_dt.isoformat(), 'timeZone': TIMEZONE},
        'end': {'dateTime': end_dt.isoformat(), 'timeZone': TIMEZONE},
    }

    try:
        service.events().insert(calendarId='primary', body=event_body).execute()
    except HttpError as e:
        logger.exception("HttpError –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END
    except Exception as e:
        logger.exception("–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–∑–∏—Ç–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation = (
        "‚ú® *–í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!* ‚ú®\n\n"
        f"üë§ *–Ü–º'—è:* {name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_obj.strftime('%d.%m.%Y')}\n"
        f"‚è∞ *–ß–∞—Å:* {time_obj.strftime('%H:%M')} ‚Äî {end_dt.time().strftime('%H:%M')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n\n"
        "üíñ –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å —É *S3 Beauty Salon*! \n_–ï—Å—Ç–µ—Ç–∏–∫–∞ –≤ –∫–æ–∂–Ω—ñ–π –¥–µ—Ç–∞–ª—ñ._"
    )
    await update.message.reply_text(confirmation, parse_mode='Markdown')

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å /start.")
    return ConversationHandler.END

# -----------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
# -----------------------
def main():
    TOKEN = os.getenv('BOT_TOKEN')
    if not TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –î–æ–¥–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—É BOT_TOKEN —É Render Environment.")
        print("BOT_TOKEN not set. Please add it to environment variables.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            STATE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date)],
            STATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time)],
            STATE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    app.add_handler(conv)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")  # –∫–æ—Ä–∏—Å–Ω–æ –≤ –ª–æ–≥–∞—Ö Render
    app.run_polling()

if __name__ == '__main__':
    main()



