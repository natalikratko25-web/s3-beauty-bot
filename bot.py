import logging
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import os

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
TOKEN = "8302341867:AAFtCeDq2eEBWe7C857lfqTQ-IKOxskxZX4"
SCOPES = ["https://www.googleapis.com/auth/calendar.events"]

# --- –õ–æ–≥–∏ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# --- –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ ---
NAME, DATE, TIME, PHONE = range(4)

# --- Google Calendar ---
def get_calendar_service():
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    if not creds or not creds.valid:
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)
        with open("token.json", "w") as token:
            token.write(creds.to_json())
    return build("calendar", "v3", credentials=creds)

def is_time_slot_available(service, date, time):
    start_time = datetime.datetime.combine(date, time).isoformat() + "+02:00"
    end_time = (datetime.datetime.combine(date, time) + datetime.timedelta(minutes=90)).isoformat() + "+02:00"
    events_result = service.events().list(calendarId="primary", timeMin=start_time, timeMax=end_time,
                                          singleEvents=True, orderBy="startTime").execute()
    return len(events_result.get("items", [])) == 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üå∏\n–ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (—Ñ–æ—Ä–º–∞—Ç: 2025-11-05)")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.datetime.strptime(update.message.text, "%Y-%m-%d").date()
        context.user_data["date"] = date
        await update.message.reply_text("‚è∞ –ù–∞ –∫–æ—Ç—Ä—É –≥–æ–¥–∏–Ω—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30)")
        return TIME
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")
        return DATE

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time = datetime.datetime.strptime(update.message.text, "%H:%M").time()
        context.user_data["time"] = time
        await update.message.reply_text("üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:")
        return PHONE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —á–∞—Å—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM.")
        return TIME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data["phone"] = phone
    name, date, time = context.user_data["name"], context.user_data["date"], context.user_data["time"]
    service = get_calendar_service()

    if not is_time_slot_available(service, date, time):
        await update.message.reply_text("‚è∞ –ù–∞ —Ü–µ–π —á–∞—Å —É–∂–µ —î –∑–∞–ø–∏—Å. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:")
        free_slots = []
        for i in range(1, 6):
            new_time = (datetime.datetime.combine(date, time) + datetime.timedelta(minutes=90 * i)).time()
            if is_time_slot_available(service, date, new_time):
                free_slots.append(new_time.strftime("%H:%M"))
            if len(free_slots) >= 3: break
        await update.message.reply_text(", ".join(free_slots) if free_slots else "–ù–∞ –∂–∞–ª—å, –≤—ñ–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –Ω–µ–º–∞—î üòî")
        return ConversationHandler.END

    start_time = datetime.datetime.combine(date, time).isoformat() + "+02:00"
    end_time = (datetime.datetime.combine(date, time) + datetime.timedelta(minutes=90)).isoformat() + "+02:00"
    event = {
        "summary": f"–ó–∞–ø–∏—Å —É —Å–∞–ª–æ–Ω—ñ –∫—Ä–∞—Å–∏ S3 ‚Äî {name}",
        "description": f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        "start": {"dateTime": start_time, "timeZone": "Europe/Kiev"},
        "end": {"dateTime": end_time, "timeZone": "Europe/Kiev"},
    }
    service.events().insert(calendarId="primary", body=event).execute()

    confirmation = (
        "‚ú® *–í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!* ‚ú®\n\n"
        f"üë©‚Äçüíº *–Ü–º‚Äô—è:* {name}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date.strftime('%d.%m.%Y')}\n"
        f"‚è∞ *–ß–∞—Å:* {time.strftime('%H:%M')} ‚Äî "
        f"{(datetime.datetime.combine(date, time) + datetime.timedelta(minutes=90)).time().strftime('%H:%M')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n\n"
        "üíñ –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å —É *S3 Beauty Salon!*\n"
        "_–ï—Å—Ç–µ—Ç–∏–∫–∞ –≤ –∫–æ–∂–Ω—ñ–π –¥–µ—Ç–∞–ª—ñ._"
    )
    await update.message.reply_text(confirmation, parse_mode="Markdown")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üí´")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ /start —É Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()
