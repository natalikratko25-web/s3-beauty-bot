# bot.py
import os
import logging
import datetime
from zoneinfo import ZoneInfo
from typing import Optional, List

from flask import Flask, request
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# Google API
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# ----------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø -----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ‚Äî –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞–π —è–∫ Environment variable –Ω–∞ Render / –ª–æ–∫–∞–ª—å–Ω–æ
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –í—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN.")
    raise SystemExit("BOT_TOKEN not set")

# –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞ —Å–∞–ª–æ–Ω—É
TZ = ZoneInfo("Europe/Kyiv")

# Google Calendar scope
SCOPES = ["https://www.googleapis.com/auth/calendar.events"]

# –®–ª—è—Ö –¥–æ credentials.json (OAuth client) —Ç–∞ token.json (–æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–æ–∫–µ–Ω)
CREDENTIALS_FILE = "credentials.json"  # –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –≤ –∫–æ—Ä—ñ–Ω—å —Ä–µ–ø–æ
TOKEN_FILE = "token.json"  # –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π refresh/access token –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

# –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö (1.5 –≥–æ–¥–∏–Ω–∏ = 90 —Ö–≤)
SERVICE_DURATION_MIN = 90

# –°–∫—ñ–ª—å–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏, —è–∫—â–æ —Å–ª–æ—Ç –∑–∞–π–Ω—è—Ç–∏–π
ALTERNATIVE_SLOTS_TO_SHOW = 3

# ----------------- GOOGLE CALENDAR -----------------
def get_calendar_service():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å Google Calendar.
    –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ credentials.json —ñ token.json –ø—Ä–∏—Å—É—Ç–Ω—ñ.
    –Ø–∫—â–æ token.json –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ OAuth –ª–æ–∫–∞–ª—å–Ω–æ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ token.json.
    """
    if not os.path.exists(CREDENTIALS_FILE):
        logger.error(f"{CREDENTIALS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂ credentials.json —É –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É.")
        raise FileNotFoundError(f"{CREDENTIALS_FILE} not found")

    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    else:
        # –ù–∞ Render –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç—å —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É OAuth-–ø—Ä–æ—Ü–µ–¥—É—Ä—É.
        # –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ flow —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ token.json —É —Ä–µ–ø–æ/—Å–µ–∫—Ä–µ—Ç–∞—Ö.
        logger.error(f"{TOKEN_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≥–µ–Ω–µ—Ä—É–π token.json –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ OAuth flow.")
        raise FileNotFoundError(f"{TOKEN_FILE} not found")

    service = build("calendar", "v3", credentials=creds)
    return service


def is_time_slot_available(service, date: datetime.date, time: datetime.time) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç [start, start+SERVICE_DURATION_MIN) –≤ Google Calendar.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –≤—ñ–ª—å–Ω–æ.
    """
    start_dt = datetime.datetime.combine(date, time, tzinfo=TZ)
    end_dt = start_dt + datetime.timedelta(minutes=SERVICE_DURATION_MIN)
    time_min = start_dt.isoformat()
    time_max = end_dt.isoformat()

    events_result = (
        service.events()
        .list(
            calendarId="primary",
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy="startTime",
        )
        .execute()
    )
    items = events_result.get("items", [])
    return len(items) == 0


def find_alternative_slots(service, date: datetime.date, time: datetime.time, count: int = 3) -> List[str]:
    """
    –®—É–∫–∞—î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏. –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ "HH:MM".
    –ì–µ–Ω–µ—Ä—É—î —Å–ª–æ—Ç–∏ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª SERVICE_DURATION_MIN (—Ç–æ–±—Ç–æ –∑—Ä—É—à—É—î –≤–ø—Ä–∞–≤–æ).
    """
    free = []
    start = datetime.datetime.combine(date, time, tzinfo=TZ)
    # –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ, —Å–∫–∞–∂—ñ–º–æ, 12 —Å–ª–æ—Ç—ñ–≤ (–∞–±–æ –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
    for i in range(1, 25):  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ –Ω–∞ 25 * 90 —Ö–≤ ‚Äî –±–∞–≥–∞—Ç–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        candidate = start + datetime.timedelta(minutes=SERVICE_DURATION_MIN * i)
        if candidate.date() != date:
            # —è–∫—â–æ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å ‚Äî –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
            break
        if is_time_slot_available(service, date, candidate.time()):
            free.append(candidate.time().strftime("%H:%M"))
            if len(free) >= count:
                break
    return free


def create_calendar_event(service, name: str, phone: str, date: datetime.date, time: datetime.time):
    """
    –°—Ç–≤–æ—Ä—é—î –ø–æ–¥—ñ—é –≤ Google Calendar (primary).
    """
    start_dt = datetime.datetime.combine(date, time, tzinfo=TZ)
    end_dt = start_dt + datetime.timedelta(minutes=SERVICE_DURATION_MIN)

    event = {
        "summary": f"üìå –ó–∞–ø–∏—Å S3 Beauty: {name}",
        "description": f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone} (–∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç S3)",
        "start": {"dateTime": start_dt.isoformat(), "timeZone": "Europe/Kyiv"},
        "end": {"dateTime": end_dt.isoformat(), "timeZone": "Europe/Kyiv"},
    }
    created = service.events().insert(calendarId="primary", body=event).execute()
    return created

# ----------------- –°–¢–ê–ù–ò –†–û–ó–ú–û–í–ò -----------------
NAME, PHONE, DATE, TIME = range(4)

# ----------------- TELEGRAM HANDLERS -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ.
    """
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É (—è–∫—â–æ —Ö–æ—á–µ)
    contact_button = KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    kb = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ñ—Ç–∞—é üíÖ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è. –Ø –±–æ—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ S3!\n–ê —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?",
        reply_markup=ReplyKeyboardRemove(),
    )
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    # –ó–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–±–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É
    contact_button = KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    kb = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å! üòä\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=kb,
    )
    return PHONE


async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ú–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç (contact) –∞–±–æ —Ç–µ–∫—Å—Ç (–Ω–æ–º–µ—Ä)
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()

    context.user_data["phone"] = phone
    await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (–≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î)", reply_markup=ReplyKeyboardRemove())
    return DATE


async def date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        date = datetime.datetime.strptime(text, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ü—Ä–∏–∫–ª–∞–¥: 2025-11-05. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return DATE

    context.user_data["date"] = date
    await update.message.reply_text("‚è∞ –í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 10:00):")
    return TIME


async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        time_val = datetime.datetime.strptime(text, "%H:%M").time()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ü—Ä–∏–∫–ª–∞–¥: 09:30. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return TIME

    context.user_data["time"] = time_val

    # –û—Ç—Ä–∏–º—É—î–º–æ service (Google Calendar)
    try:
        service = get_calendar_service()
    except FileNotFoundError as e:
        # –Ø–∫—â–æ token.json –∞–±–æ credentials.json –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/–ª–æ–≥
        logger.error("Google credentials error: %s", e)
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å ‚Äî –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Google credentials/token –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return ConversationHandler.END

    date = context.user_data["date"]
    time_obj = context.user_data["time"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É
    try:
        free = is_time_slot_available(service, date, time_obj)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ Google Calendar: %s", e)
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    if not free:
        # –ó–Ω–∞–π–¥–µ–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ª–æ—Ç–∏
        alternatives = find_alternative_slots(service, date, time_obj, count=ALTERNATIVE_SLOTS_TO_SHOW)
        if alternatives:
            alt_text = ", ".join(alternatives)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–∞ —Ü–µ–π —á–∞—Å —É–∂–µ —î –∑–∞–ø–∏—Å. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —É —Ç–æ–π –∂–µ –¥–µ–Ω—å: {alt_text}\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
            )
            return TIME
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–∞ —Ü–µ–π –¥–µ–Ω—å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –±–ª–∏–∑—å–∫–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É."
            )
            return DATE

    # –Ø–∫—â–æ –≤—ñ–ª—å–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é
    try:
        created = create_calendar_event(
            service,
            name=context.user_data.get("name", "–ö–ª—ñ—î–Ω—Ç"),
            phone=context.user_data.get("phone", ""),
            date=date,
            time=time_obj,
        )
    except Exception as e:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ: %s", e)
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äî –≤—ñ–∑–∏—Ç–∫–∞ (—Ç–µ–∫—Å—Ç + –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–ª–æ–Ω—É)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    end_dt = datetime.datetime.combine(date, time_obj, tzinfo=TZ) + datetime.timedelta(minutes=SERVICE_DURATION_MIN)
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        f"üë©‚Äçüíº –Ü–º'—è: {context.user_data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n"
        f"üìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n"
        f"‚è∞ –ß–∞—Å: {time_obj.strftime('%H:%M')} ‚Äî {end_dt.time().strftime('%H:%M')}\n\n"
        "–î—è–∫—É—î–º–æ! –ß–µ–∫–∞—î–º–æ –Ω–∞ –í–∞—Å —É S3 Beauty Salon üíñ",
        reply_markup=ReplyKeyboardRemove(),
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–∑–∏—Ç–∫—É —Å–∞–ª–æ–Ω—É (—è–∫ –∫–æ–Ω—Ç–∞–∫—Ç)
    # –¢—É—Ç –≤–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∞ —ñ–º'—è —Å–∞–ª–æ–Ω—É ‚Äî –º–æ–∂–Ω–∞ –∑ Environment –∞–±–æ —Ö–∞—Ä–¥–∫–æ–¥
    salon_phone = os.environ.get("SALON_PHONE", "+380991234567")
    salon_name = os.environ.get("SALON_NAME", "S3 Beauty Salon")
    # –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é send_contact ‚Äî –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ–Ω—Ç–∞–∫—Ç —É —á–∞—Ç
    await context.bot.send_contact(
        chat_id=update.effective_chat.id,
        phone_number=salon_phone,
        first_name=salon_name,
    )

    # –ú–æ–∂–µ–º–æ —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    event_link = created.get("htmlLink")
    if event_link:
        await update.message.reply_text(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø–∏—Å —É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ: {event_link}")

    return ConversationHandler.END


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ----------------- FLASK + TELEGRAM SETUP -----------------
app = Flask(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Application (PTB v20)
application = Application.builder().token(TOKEN).build()

# Conversation handler
conv = ConversationHandler(
    entry_points=[CommandHandler("start", start_handler)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        PHONE: [
            # accept contact or phone text
            MessageHandler(filters.CONTACT, phone_handler),
            MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler),
        ],
        DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_handler)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_handler)],
    },
    fallbacks=[CommandHandler("cancel", cancel_handler)],
    allow_reentry=True,
)
application.add_handler(conv)


# –í–µ–±—Ö—É–∫ –º–∞—Ä—à—Ä—É—Ç ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async view (Flask[async] –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: %s", e)
    return "ok", 200


@app.route("/", methods=["GET"])
def health():
    return "ü§ñ S3 Beauty Bot ‚Äî –ø—Ä–∞—Ü—é—î", 200


# ----------------- RUN (–≤ —Ä–µ–∂–∏–º—ñ webhook) -----------------
if __name__ == "__main__":
    # –°—Ç–∞–≤–∏–º–æ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É (Render –¥–∞—î –∑–º—ñ–Ω–Ω—É RENDER_EXTERNAL_HOSTNAME)
    external_host = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    if external_host:
        webhook_url = f"https://{external_host}/{TOKEN}"
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ fallback (–Ω–µ –¥–ª—è production)
        webhook_url = os.environ.get("WEBHOOK_URL", f"https://example.com/{TOKEN}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    try:
        # set_webhook —á–µ—Ä–µ–∑ Bot
        bot = application.bot
        bot.set_webhook(webhook_url)
        logger.info("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s", webhook_url)
    except Exception as e:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook: %s", e)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask (Render –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –ø–æ—Ä—Ç—É)
    port = int(os.environ.get("PORT", 10000))
    # Note: Flask[async] –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π (Flask[async]==3.1.2 –≤ requirements)
    app.run(host="0.0.0.0", port=port)
